{"version":3,"file":"static/js/506.6b20668b.chunk.js","mappings":"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","sources":["types/types.ts","../node_modules/@babel/runtime/helpers/esm/createClass.js","utils/chess/select.ts","utils/chess/helpers.ts","utils/chess/index.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js"],"sourcesContent":["export type color = \"white\" | \"black\";\r\nexport type figure = \"rook\" | \"knight\" | \"bishop\" | \"queen\" | \"king\" | \"pawn\";\r\nexport type captureFigure = \"rook\" | \"knight\" | \"bishop\" | \"queen\" | \"pawn\";\r\n\r\nexport enum EFigure {\r\n\trook = \"rook\",\r\n\tknight = \"knight\",\r\n\tbishop = \"bishop\",\r\n\tqueen = \"queen\",\r\n\tking = \"king\",\r\n\tpawn = \"pawn\"\r\n}\r\n\r\nexport interface ICell {\r\n\tid: string;\r\n\tx: number;\r\n\ty: number;\r\n\tfigure: figure | null;\r\n\tcolor: color | null;\r\n\tisSelected?: boolean;\r\n\tcanMove?: boolean;\r\n\tisUnderAtack?: boolean;\r\n}\r\n\r\nexport enum EShortColor {\r\n\tb = \"black\",\r\n\tw = \"white\"\r\n}\r\n\r\nexport enum EShortFigureName {\r\n\tr = \"rook\",\r\n\th = \"knight\",\r\n\tb = \"bishop\",\r\n\tq = \"queen\",\r\n\tk = \"king\",\r\n\tp = \"pawn\"\r\n}\r\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import { color, ICell } from \"types/types\";\r\n\r\ntype GetCell = (x: number, y: number) => ICell;\r\n\r\nfunction selectPawn({ x, y, color }: ICell, getCell: GetCell) {\r\n\tlet dir = color === \"white\" ? 1 : -1;\r\n\tlet isFirstMove = color === \"white\" ? y === 1 : y === 6;\r\n\tlet moveCells = [[x, y + 1 * dir]];\r\n\tlet atackCells = [\r\n\t\t[x - 1, y + 1 * dir],\r\n\t\t[x + 1, y + 1 * dir]\r\n\t];\r\n\r\n\tif (isFirstMove) {\r\n\t\tmoveCells.push([x, y + 2 * dir]);\r\n\t}\r\n\r\n\tfor (const cellArr of moveCells) {\r\n\t\tconst [posX, posY] = cellArr;\r\n\t\tlet cell = getCell(posX, posY);\r\n\r\n\t\tif (cell?.figure) {\r\n\t\t\tbreak;\r\n\t\t} else {\r\n\t\t\tcell.canMove = true;\r\n\t\t}\r\n\t}\r\n\r\n\t_selectByArr(atackCells, getCell, color, true);\r\n}\r\n\r\nfunction selectKnight({ x, y, color }: ICell, getCell: GetCell) {\r\n\tlet cellArrays = [\r\n\t\t[x - 1, y + 2],\r\n\t\t[x + 1, y + 2],\r\n\t\t[x - 1, y - 2],\r\n\t\t[x + 1, y - 2],\r\n\t\t[x - 2, y + 1],\r\n\t\t[x + 2, y + 1],\r\n\t\t[x - 2, y - 1],\r\n\t\t[x + 2, y - 1]\r\n\t];\r\n\r\n\t_selectByArr(cellArrays, getCell, color);\r\n}\r\n\r\nfunction selectKing({ x, y, color }: ICell, getCell: GetCell) {\r\n\tlet cellArrays = [\r\n\t\t[x - 1, y],\r\n\t\t[x - 1, y + 1],\r\n\t\t[x, y + 1],\r\n\t\t[x + 1, y + 1],\r\n\t\t[x + 1, y],\r\n\t\t[x + 1, y - 1],\r\n\t\t[x, y - 1],\r\n\t\t[x - 1, y - 1]\r\n\t];\r\n\r\n\t_selectByArr(cellArrays, getCell, color);\r\n}\r\n\r\nfunction selectRook(cell: ICell, getCell: GetCell) {\r\n\t_selectHorizontalAndVertical(cell, getCell);\r\n}\r\n\r\nfunction selectBishop(cell: ICell, getCell: GetCell) {\r\n\t_selectDiagonal(cell, getCell);\r\n}\r\n\r\nfunction selectQueen(cell: ICell, getCell: GetCell) {\r\n\t_selectDiagonal(cell, getCell);\r\n\t_selectHorizontalAndVertical(cell, getCell);\r\n}\r\n\r\nfunction _selectByArr(\r\n\tcellArrays: number[][],\r\n\tgetCell: GetCell,\r\n\tcolor: color | null,\r\n\tonlyAtack = false\r\n) {\r\n\tcellArrays.forEach((cellArr) => {\r\n\t\tconst [posX, posY] = cellArr;\r\n\t\tlet cell = getCell(posX, posY);\r\n\r\n\t\tif (cell.figure) {\r\n\t\t\tif (cell?.color !== color) {\r\n\t\t\t\tcell.isUnderAtack = true;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t!onlyAtack && (cell.canMove = true);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction _selectByFunc(\r\n\t{ x, y, color }: ICell,\r\n\tgetCell: GetCell,\r\n\tcallBack: ([a, b]: number[]) => number[]\r\n) {\r\n\tlet cellArr = [x, y];\r\n\r\n\tdo {\r\n\t\tcellArr = callBack(cellArr);\r\n\t\tlet cell = getCell(cellArr[0], cellArr[1]);\r\n\r\n\t\tif (cell?.figure) {\r\n\t\t\tif (cell?.color !== color) {\r\n\t\t\t\tcell.isUnderAtack = true;\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcell.canMove = true;\r\n\t} while (getCell(cellArr[0], cellArr[1]).id);\r\n}\r\n\r\nfunction _selectHorizontalAndVertical(cell: ICell, getCell: GetCell) {\r\n\tlet funcs = [\r\n\t\t([r, c]: number[]) => [r + 1, c],\r\n\t\t([r, c]: number[]) => [r - 1, c],\r\n\t\t([r, c]: number[]) => [r, c - 1],\r\n\t\t([r, c]: number[]) => [r, c + 1]\r\n\t];\r\n\r\n\tfuncs.forEach((func) => {\r\n\t\t_selectByFunc(cell, getCell, func);\r\n\t});\r\n}\r\n\r\nfunction _selectDiagonal(cell: ICell, getCell: GetCell) {\r\n\tlet funcs = [\r\n\t\t([r, c]: number[]) => [r + 1, c + 1],\r\n\t\t([r, c]: number[]) => [r - 1, c - 1],\r\n\t\t([r, c]: number[]) => [r + 1, c - 1],\r\n\t\t([r, c]: number[]) => [r - 1, c + 1]\r\n\t];\r\n\r\n\tfuncs.forEach((func) => {\r\n\t\t_selectByFunc(cell, getCell, func);\r\n\t});\r\n}\r\n\r\nexport {\r\n\tselectKnight,\r\n\tselectPawn,\r\n\tselectRook,\r\n\tselectBishop,\r\n\tselectQueen,\r\n\tselectKing\r\n};\r\n","import { color, EFigure, ICell } from \"types/types\";\r\nimport {\r\n\tselectKnight,\r\n\tselectPawn,\r\n\tselectRook,\r\n\tselectBishop,\r\n\tselectQueen,\r\n\tselectKing\r\n} from \"./select\";\r\n\r\nfunction getCell(board: ICell[], x: number, y: number) {\r\n\treturn board.find((cell) => cell.x === x && cell.y === y);\r\n}\r\n\r\nfunction getDeepCopy<T>(obj: T): T {\r\n\treturn JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nfunction markBoardCells(board: ICell[], cells: ICell[], color: color) {\r\n\tcells.forEach((cell) => {\r\n\t\tlet boardCell = getCell(board, cell.x, cell.y);\r\n\t\tif (!boardCell) return;\r\n\r\n\t\tif (boardCell.figure) {\r\n\t\t\tif (boardCell?.color !== color) {\r\n\t\t\t\tboardCell.isUnderAtack = true;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tboardCell.canMove = true;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction getSelectedCell(board: ICell[]) {\r\n\treturn board.find((cell) => cell.isSelected);\r\n}\r\n\r\nfunction getKing(board: ICell[], color: color) {\r\n\treturn board.find((cell) => cell.color === color && cell.figure === \"king\");\r\n}\r\n\r\nfunction filterMovesByKing(\r\n\tboard: ICell[],\r\n\tselectedCell: ICell,\r\n\tpossibleMoves: ICell[]\r\n) {\r\n\treturn possibleMoves.filter((cell) => {\r\n\t\tlet [movedBoard] = moveFigure(board, selectedCell, cell);\r\n\t\treturn (\r\n\t\t\tselectedCell.color && !isKingUnderAtack(movedBoard, selectedCell.color)\r\n\t\t);\r\n\t});\r\n}\r\n\r\nfunction moveFigure(\r\n\tboard: ICell[],\r\n\t{ x: fromX, y: fromY }: ICell,\r\n\t{ x: toX, y: toY }: ICell\r\n): [ICell[], ICell[\"figure\"], ICell[\"color\"]] {\r\n\tlet boardCopy = getDeepCopy(board);\r\n\tlet fromCell = getCell(boardCopy, fromX, fromY);\r\n\tlet toCell = getCell(boardCopy, toX, toY);\r\n\tif (!fromCell || !toCell) return [[], null, null];\r\n\r\n\tconst { figure, color } = toCell;\r\n\ttoCell.figure = fromCell?.figure;\r\n\ttoCell.color = fromCell?.color;\r\n\tfromCell.figure = null;\r\n\tfromCell.color = null;\r\n\r\n\treturn [boardCopy, figure, color];\r\n}\r\n\r\nfunction isKingUnderAtack(board: ICell[], color: color) {\r\n\tlet boardCopy = getDeepCopy(board);\r\n\tboard.forEach((cell) => {\r\n\t\tif (cell.figure && cell.color !== color) {\r\n\t\t\tlet possibleMoves = getPossibleMoves(boardCopy, cell.x, cell.y);\r\n\t\t\tcell.color && markBoardCells(boardCopy, possibleMoves, cell.color);\r\n\t\t}\r\n\t});\r\n\r\n\tlet king = getKing(boardCopy, color);\r\n\treturn !!king?.isUnderAtack;\r\n}\r\n\r\nfunction getPossibleMoves(board: ICell[], x: number, y: number) {\r\n\tlet boardCopy = getDeepCopy(board);\r\n\tlet cell = getCell(board, x, y);\r\n\tlet getBoardCell = (x: number, y: number) => {\r\n\t\tlet cell = getCell(boardCopy, x, y);\r\n\t\treturn cell ? cell : ({} as ICell);\r\n\t};\r\n\r\n\tswitch (cell?.figure) {\r\n\t\tcase EFigure.knight:\r\n\t\t\tselectKnight(cell, getBoardCell);\r\n\t\t\tbreak;\r\n\t\tcase EFigure.pawn:\r\n\t\t\tselectPawn(cell, getBoardCell);\r\n\t\t\tbreak;\r\n\t\tcase EFigure.rook:\r\n\t\t\tselectRook(cell, getBoardCell);\r\n\t\t\tbreak;\r\n\t\tcase EFigure.bishop:\r\n\t\t\tselectBishop(cell, getBoardCell);\r\n\t\t\tbreak;\r\n\t\tcase EFigure.queen:\r\n\t\t\tselectQueen(cell, getBoardCell);\r\n\t\t\tbreak;\r\n\t\tcase EFigure.king:\r\n\t\t\tselectKing(cell, getBoardCell);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn boardCopy.filter((cell) => cell.canMove || cell.isUnderAtack);\r\n}\r\n\r\nexport {\r\n\tgetDeepCopy,\r\n\tgetCell,\r\n\tmarkBoardCells,\r\n\tgetSelectedCell,\r\n\tgetKing,\r\n\tmoveFigure,\r\n\tfilterMovesByKing,\r\n\tisKingUnderAtack,\r\n\tgetPossibleMoves\r\n};\r\n","import {\r\n\tcolor,\r\n\tEShortColor,\r\n\tEShortFigureName,\r\n\tICell,\r\n\tfigure,\r\n\tcaptureFigure\r\n} from \"types/types\";\r\nimport {\r\n\tfilterMovesByKing,\r\n\tgetCell,\r\n\tgetDeepCopy,\r\n\tgetPossibleMoves,\r\n\tgetSelectedCell,\r\n\tisKingUnderAtack,\r\n\tmarkBoardCells,\r\n\tmoveFigure\r\n} from \"./helpers\";\r\n\r\nconst EMPTY_CELL = \"..\";\r\nconst DEFAULT_BOARD_TEMPLATE = `\r\n    wr wh wb wq wk wb wh wr\r\n    wp wp wp wp wp wp wp wp\r\n    .. .. .. .. .. .. .. ..\r\n    .. .. .. .. .. .. .. ..\r\n    .. .. .. .. .. .. .. ..\r\n    .. .. .. .. .. .. .. ..\r\n    bp bp bp bp bp bp bp bp\r\n    br bh bb bq bk bb bh br\r\n`;\r\nconst SIZE = 8;\r\n\r\nexport interface IChessState {\r\n\tplayerColor: color;\r\n\tboard: ICell[];\r\n\tisCheck: boolean;\r\n\tisCheckmate: boolean;\r\n\tcapturedFiguresMap: {\r\n\t\t[key in color]: {\r\n\t\t\t[key in captureFigure]: number;\r\n\t\t};\r\n\t};\r\n}\r\n\r\nexport interface IChess extends IChessState {\r\n\tmove: (x: number, y: number) => void;\r\n\tselect: (x: number, y: number) => void;\r\n}\r\n\r\nexport default class Chess implements IChess {\r\n\tprivate _playerColor: color;\r\n\tprivate _isCheck: boolean;\r\n\tprivate _isCheckmate: boolean;\r\n\tprivate _board: ICell[];\r\n\tprivate _capturedFiguresMap: {\r\n\t\t[key in color]: {\r\n\t\t\t[key in captureFigure]: number;\r\n\t\t};\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tthis._playerColor = \"white\";\r\n\t\tthis._isCheck = false;\r\n\t\tthis._isCheckmate = false;\r\n\t\tthis._board = this._getDefaultBoard();\r\n\t\tthis._capturedFiguresMap = {\r\n\t\t\twhite: {\r\n\t\t\t\tqueen: 0,\r\n\t\t\t\tknight: 0,\r\n\t\t\t\trook: 0,\r\n\t\t\t\tbishop: 0,\r\n\t\t\t\tpawn: 0\r\n\t\t\t},\r\n\t\t\tblack: {\r\n\t\t\t\tqueen: 0,\r\n\t\t\t\tknight: 0,\r\n\t\t\t\trook: 0,\r\n\t\t\t\tbishop: 0,\r\n\t\t\t\tpawn: 0\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tget board() {\r\n\t\treturn getDeepCopy(this._board);\r\n\t}\r\n\r\n\tget isCheck() {\r\n\t\treturn this._isCheck;\r\n\t}\r\n\r\n\tget isCheckmate() {\r\n\t\treturn this._isCheckmate;\r\n\t}\r\n\r\n\tget playerColor() {\r\n\t\treturn this._playerColor;\r\n\t}\r\n\r\n\tget capturedFiguresMap() {\r\n\t\treturn getDeepCopy(this._capturedFiguresMap);\r\n\t}\r\n\r\n\tprivate _getDefaultBoard() {\r\n\t\tlet board: ICell[] = [];\r\n\t\tlet templateArr = DEFAULT_BOARD_TEMPLATE.split(/[\\s]/).filter((i) => i);\r\n\r\n\t\ttemplateArr.forEach((str, index) => {\r\n\t\t\tlet y = Math.trunc(index / SIZE);\r\n\t\t\tlet x = index % SIZE;\r\n\r\n\t\t\tlet cell = {\r\n\t\t\t\tid: `cell_${y}_${x}`,\r\n\t\t\t\tx,\r\n\t\t\t\ty,\r\n\t\t\t\tfigure: null,\r\n\t\t\t\tcolor: null,\r\n\t\t\t\tisSelected: false,\r\n\t\t\t\tisUnderAtack: false,\r\n\t\t\t\tcanMove: false\r\n\t\t\t} as ICell;\r\n\r\n\t\t\tif (str !== EMPTY_CELL) {\r\n\t\t\t\tconst [color, figure] = str.split(\"\");\r\n\r\n\t\t\t\tcell.figure = EShortFigureName[figure as keyof typeof EShortFigureName];\r\n\t\t\t\tcell.color = EShortColor[color as keyof typeof EShortColor];\r\n\t\t\t}\r\n\r\n\t\t\tboard.push(cell);\r\n\t\t});\r\n\r\n\t\treturn board;\r\n\t}\r\n\r\n\tprivate _captureFigure(figure: figure | null, color: color | null) {\r\n\t\tif (figure && figure !== \"king\" && color) {\r\n\t\t\tlet winColor: color = color === \"white\" ? \"black\" : \"white\";\r\n\t\t\tthis._capturedFiguresMap[winColor][figure as captureFigure] += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _changePlayer() {\r\n\t\tthis._playerColor = this._playerColor === \"white\" ? \"black\" : \"white\";\r\n\t}\r\n\r\n\tprivate _clearBoard() {\r\n\t\tthis._board.forEach((cell) => {\r\n\t\t\tcell.canMove = false;\r\n\t\t\tcell.isUnderAtack = false;\r\n\t\t\tcell.isSelected = false;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate _updateBoard(newBoard: ICell[]) {\r\n\t\tthis._board.length = 0;\r\n\t\tthis._board = getDeepCopy(newBoard);\r\n\t}\r\n\r\n\tpublic select(x: number, y: number, noClear = false) {\r\n\t\t!noClear && this._clearBoard();\r\n\t\tlet selectedCell = getCell(this._board, x, y);\r\n\t\tif (!selectedCell || !selectedCell.figure || !selectedCell.color) return;\r\n\r\n\t\tselectedCell.isSelected = true;\r\n\t\tlet possibleMoves = getPossibleMoves(this.board, x, y);\r\n\t\tlet filteredPossibleMoves = filterMovesByKing(\r\n\t\t\tthis.board,\r\n\t\t\tselectedCell,\r\n\t\t\tpossibleMoves\r\n\t\t);\r\n\r\n\t\tmarkBoardCells(this._board, filteredPossibleMoves, selectedCell.color);\r\n\t}\r\n\r\n\tpublic move(x: number, y: number) {\r\n\t\tlet selectedCell = getSelectedCell(this._board);\r\n\t\tlet toCell = getCell(this._board, x, y);\r\n\t\tif (!selectedCell || !toCell) return;\r\n\r\n\t\tlet [board, figure, color] = moveFigure(this._board, selectedCell, toCell);\r\n\t\tthis._updateBoard(board);\r\n\t\tthis._captureFigure(figure, color);\r\n\t\tthis._changePlayer();\r\n\t\tthis._clearBoard();\r\n\r\n\t\tthis._setCheckAndCheckmate();\r\n\t}\r\n\r\n\tprivate _setCheckAndCheckmate() {\r\n\t\tthis._isCheck = isKingUnderAtack(this._board, this._playerColor);\r\n\t\tthis._isCheckmate = false;\r\n\t\tif (!this._isCheck) return;\r\n\r\n\t\tthis._board.forEach((cell) => {\r\n\t\t\tif (cell.color === this._playerColor) {\r\n\t\t\t\tthis.select(cell.x, cell.y, true);\r\n\t\t\t}\r\n\t\t});\r\n\t\tlet cells = this._board.filter((cell) => cell.canMove || cell.isUnderAtack);\r\n\t\tthis._isCheckmate = !cells.length;\r\n\t\tthis._clearBoard();\r\n\t}\r\n}\r\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}"],"names":["EFigure","EShortColor","EShortFigureName","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_selectByArr","cellArrays","getCell","color","onlyAtack","forEach","cellArr","posX","posY","cell","figure","isUnderAtack","canMove","_selectByFunc","callBack","x","y","id","_selectHorizontalAndVertical","func","_selectDiagonal","board","find","getDeepCopy","obj","JSON","parse","stringify","markBoardCells","cells","boardCell","filterMovesByKing","selectedCell","possibleMoves","filter","moveFigure","movedBoard","isKingUnderAtack","fromX","fromY","toX","toY","boardCopy","fromCell","toCell","getPossibleMoves","king","getKing","getBoardCell","knight","selectKnight","pawn","dir","moveCells","atackCells","push","selectPawn","rook","selectRook","bishop","selectBishop","queen","selectQueen","selectKing","Chess","instance","Constructor","TypeError","_playerColor","_isCheck","_isCheckmate","_board","_capturedFiguresMap","this","_getDefaultBoard","white","black","protoProps","staticProps","split","str","index","Math","trunc","isSelected","winColor","newBoard","noClear","_clearBoard","filteredPossibleMoves","getSelectedCell","_updateBoard","_captureFigure","_changePlayer","_setCheckAndCheckmate","select","prototype"],"sourceRoot":""}